---
title: More Bikeshare Fun
format: html
jupyter: python3
---

```{python}
import pandas as pd
import numpy as np
import seaborn as sns
import os
```
## Extract Method One.


## Extract Load Method Three

```{python}
combined_df = pd.read_csv('data/202105-divvy-tripdata.csv')
combined_df.shape
```

```{python}
combined_df = combined_df[combined_df['start_station_name'].notna()]

# Remove rows where 'start_station_name' is an empty string or contains only whitespace
combined_df = combined_df[combined_df['start_station_name'].str.strip() != '']
combined_df.shape
```

## Extract Dates from started_at and Ended_at only keep rows where start_date and end_date are the same.

```{python} 

# Assuming df is your DataFrame and it has columns 'started_at' and 'ended_at'
# Replace df with the actual name of your DataFrame

# Convert 'started_at' and 'ended_at' to datetime if they are not already
combined_df['started_at'] = pd.to_datetime(combined_df['started_at'])
combined_df['ended_at'] = pd.to_datetime(combined_df['ended_at'])

# Extract just the date part and create new columns 'start_date' and 'end_date'
combined_df['start_date'] = combined_df['started_at'].dt.date
combined_df['end_date'] = combined_df['ended_at'].dt.date

# Keep only rows where 'start_date' and 'end_date' are the same
combined_df = combined_df[combined_df['start_date'] == combined_df['end_date']]

# Now df will have only the rows where 'start_date' and 'end_date' match

```
```{python}
combined_df.dtypes
```
```{python}

# Assuming combined_df is your DataFrame
# Replace combined_df with the actual name of your DataFrame

# Convert 'started_at' and 'ended_at' to datetime if not already
combined_df['started_at'] = pd.to_datetime(combined_df['started_at'], errors='coerce')
combined_df['ended_at'] = pd.to_datetime(combined_df['ended_at'], errors='coerce')

# Drop rows where either 'started_at' or 'ended_at' is NaT
combined_df.dropna(subset=['started_at', 'ended_at'], inplace=True)

# Calculate trip duration in hours
combined_df['trip_duration'] = (combined_df['ended_at'] - combined_df['started_at']) / pd.Timedelta(hours=1)

# Filter out rows where trip duration is less than or equal to 0
combined_df = combined_df[combined_df['trip_duration'] > 0]


## Calculate Trip Duration and Keep rows where Trip Duratoin is Greater than Zero
# combined_df.shape   
```
```{python}
from sqlalchemy import create_engine

# Replace with your SQL Server information
server = 'DAVESDATA'
database = 'cyclistic'
username = 'admin'
password = '123456'

# Step 1: Connect to the SQL Server Database
# SQLAlchemy connection string for SQL Server
connection_string = f"mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server"
engine = create_engine(connection_string)
```

```{python}
##
# Upload the DataFrame in chunks
chunksize = 1000  # Number of rows per chunk
combined_df.to_sql('people', con=engine, index=False, if_exists='replace', chunksize=chunksize)
##
# Assuming a table named 'people', replace or create if it doesn't exist
# combined_df.to_sql('rides', con=engine, index=False, if_exists='replace')

# Step 3: Retrieve Data
pd.read_sql('SELECT count(*) FROM rides', con=engine)

# Step 4: Count the Number of Rows
# row_count = len(retrieved_df)

# print("Retrieved Data:")
# print(retrieved_df)
# print("\nNumber of Rows:", row_count)



```

## Creat Date Table