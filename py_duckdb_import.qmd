---
title: "Importing Cyclelistic Bike (duckdb)"
format: html
jupyther: python3
---

```{python}
import duckdb
import pandas as pd
import numpy as np
# import seaborn as sns
# import matplotlib.pyplot as plt


query = """
SELECT * 
FROM read_csv_auto('bike_rides/*.csv') 
"""
rides = duckdb.sql(query).df()

rides.isnull().sum()

# Remvoe Rides Missing Station Names.

rides = rides.dropna(subset=['start_station_name', 'end_station_name'])

# Only Include Sames Day Rides
rides = rides.copy()

# Convert started_at and ended_at to datetime
rides['started_at'] = pd.to_datetime(rides['started_at'])
rides['ended_at'] = pd.to_datetime(rides['ended_at'])

# Extract only the date part
rides['start_date'] = rides['started_at'].dt.date
rides['end_date'] = rides['ended_at'].dt.date

# Filter rows where start_date and end_date are the same
df_filtered = rides[rides['start_date'] == rides['end_date']]
df_filtered = df_filtered.copy()

# Extract Start Hour
df_filtered['start_hour'] = df_filtered['started_at'].dt.hour

# Extract Day of the Week Number (0 = Monday, 6 = Sunday)
df_filtered['day_of_week'] = df_filtered['started_at'].dt.dayofweek

# Filter rides where start_hour is between 6 (inclusive) and 18 (exclusive), and day_of_week is 0-4
filtered_df = df_filtered[(df_filtered['start_hour'] >= 6) & (df_filtered['start_hour'] < 18) & (df_filtered['day_of_week'].between(0, 4))]

# Create a new DataFramec
cleaned = filtered_df.copy()
```
# Calculate Trip Duration in minutes.


```{python}
# Calculate trip duration in minutes
rides['trip_duration_minutes'] = (rides['ended_at'] - rides['started_at']).dt.total_seconds() / 60

# Validate the calculation
print(rides[['started_at', 'ended_at', 'trip_duration_minutes']].head())

# Check for any negative durations (invalid data)
negative_durations = rides[rides['trip_duration_minutes'] < 0]
print(f"Number of trips with negative duration: {negative_durations.shape[0]}")

# rides[['trip_duration_minutes']].describe()
```
